<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>F# on VGALTES blog</title>
    <link>http://example.org/tags/f#/</link>
    <description>Recent content in F# on VGALTES blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 17 Oct 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/f#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Partial classification active pattern</title>
      <link>http://example.org/post/2016-10-17-partial-classification-active-pattern/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/2016-10-17-partial-classification-active-pattern/</guid>
      <description>Pattern matching is a powerful and amazing characteristic of F#. Actually, is so amazing that Microsoft is starting to port it to C#.
There are different kinds of pattern matching. In this post we&amp;rsquo;re going to take a look at a partial classification active pattern that takes an argument and returns a value.
As its name denotes, is a pattern that partially classificates what you match with it. That means that doesn&amp;rsquo;t try to define all possible options but just one.</description>
    </item>
    
    <item>
      <title>Running NUnit3 tests using fake</title>
      <link>http://example.org/post/2016-10-13-run-nunit3-tests-using-fake/</link>
      <pubDate>Thu, 13 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/2016-10-13-run-nunit3-tests-using-fake/</guid>
      <description>When you have some unit tests developed using NUnit 2.x your FAKE script looks like something like this:
Target &amp;quot;RunUnitTests&amp;quot; (fun _ -&amp;gt; !! (testDir + &amp;quot;/*.Tests.dll&amp;quot;) |&amp;gt; NUnit (fun p -&amp;gt; {p with ToolPath = &amp;quot;packages/NUnit.Runners/tools/&amp;quot;})  )
But NUnit3 works slightly different. Instead of having a single NUnit.Runners package, that package references some other packages (runner, extensions, etc). One of those packages is NUnit.ConsoleRunner that has the exe inside the tools folder.</description>
    </item>
    
    <item>
      <title>RPG Combat Kata</title>
      <link>http://example.org/post/2016-07-04-rpg-combat-kata/</link>
      <pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/2016-07-04-rpg-combat-kata/</guid>
      <description>A couple of weeks ago I saw these tweets (in Spanish):
Hoy en la ofi hemos empezado la mañana con la RPG Combat kata de @SuuiGD que hicimos en el #scpna :-D https://t.co/vsK0OucncD
&amp;mdash; Xabi Sáez de Ocáriz (@ziraco) June 22, 2016 
@SuuiGD @ziraco a mi me flipó tanto que estoy haciendo la versión &amp;quot;Extended&amp;quot;.si sigo así, le pongo UI y al store! ;)
&amp;mdash; Modesto San Juan (@msanjuan) June 22, 2016</description>
    </item>
    
    <item>
      <title>F# by example: FizzBuzz kata rivisited - More on Pattern-Matching</title>
      <link>http://example.org/post/2015-05-10-fsharp-by-example-fizzbuzz-kata-rivisited-more-on-pattern-matching/</link>
      <pubDate>Sun, 10 May 2015 18:30:19 +0100</pubDate>
      
      <guid>http://example.org/post/2015-05-10-fsharp-by-example-fizzbuzz-kata-rivisited-more-on-pattern-matching/</guid>
      <description>In the first post of this series we&#39;ve seen a possible implementation for the FizzBuzz kata. In particular, we&#39;ve finished the article with this code for the fizzBuzz function:
https://gist.github.com/vgaltes/edafb6efc55273543a1d
We&#39;ve applied a Tuple pattern to match the tuple created in the match part. We&#39;ve also applied Wildcard matching to discard the values we are not interested in.
In this article we&#39;re going to see how we can solve this problem using another flavors of Pattern-Matching.</description>
    </item>
    
    <item>
      <title>F# by example: FizzBuzz Kata</title>
      <link>http://example.org/post/2015-04-24-f-example-fizzbuzz-kata/</link>
      <pubDate>Fri, 24 Apr 2015 15:03:26 +0100</pubDate>
      
      <guid>http://example.org/post/2015-04-24-f-example-fizzbuzz-kata/</guid>
      <description>Last Tuesday I started a book club with my friends Samir Talwar and Pedro Moreira Santos (both of them working at Codurance). The book we&#39;ve choseen is &#34;The book of F#&#34;, because we want to learn F#.
After reading the first three chapters we decided to make the FizzBuzz kata to start practicing. In this article I&#39;m going to explain you how we solved the kata trying to explain all the F# syntax we use.</description>
    </item>
    
    <item>
      <title>A Premier League team will win the Champions League this year</title>
      <link>http://example.org/post/2016-04-01-a-premier-league-team-will-win-the-champions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/2016-04-01-a-premier-league-team-will-win-the-champions/</guid>
      <description>Spain and Germany are dominating with an iron fist last Champions League editions. After a lot of investment, a Premier League team is ready to conquer the longed for trophy. In this article we&amp;rsquo;ll demonstrate this fact.
The data We&amp;rsquo;ve borrowed the data for this study from the UEFA&amp;rsquo;s official page. If you go to this address http://www.uefa.com/uefachampionsleague/season=2011/matches/all/index.html# you&amp;rsquo;ll see all the matches played in the season 2010&amp;frasl;2011. Change the year in the query string to see another year&amp;rsquo;s results.</description>
    </item>
    
    <item>
      <title>Arrays in F#</title>
      <link>http://example.org/post/2016-02-17-arrays-in-fsharp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/2016-02-17-arrays-in-fsharp/</guid>
      <description>Arrays are one of the basic data structures in F#. In this article we&amp;rsquo;re going to see an introduction of what can we do with them.
Creation There are several ways to create an array in F#
Create from a literal We can create an array with a predefined set of values. To do that, we just need to specify the values separated by semicolons and wrapped between [| and |]</description>
    </item>
    
    <item>
      <title>Decorator pattern in F#</title>
      <link>http://example.org/post/2016-06-01-decorator-pattern-in-fsharp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/2016-06-01-decorator-pattern-in-fsharp/</guid>
      <description>Introduction A couple of weeks ago my friend Ian Russell explained the decorator pattern at work. For those who don&amp;rsquo;t know exactly how it works, the decorator pattern allows us to add behavior to an individual object without affecting the behavior of other objects of that class (Wikipedia).
The object oriented solution There are a couple of typical implementations of the pattern in C#. The &amp;ldquo;lightweight&amp;rdquo; version is &amp;ldquo;just&amp;rdquo; to create decorators implementing the same interface of the decorated class, and passing the decorated object in the constructor of the decorator.</description>
    </item>
    
    <item>
      <title>Function composition and pipeline operator</title>
      <link>http://example.org/post/2016-04-02-function-composition-and-pipeline-operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/2016-04-02-function-composition-and-pipeline-operator/</guid>
      <description>As Scott Wlaschin points out in his excellent article function composition it&amp;rsquo;s not the same as using the pipeline operator.
The definition of the pipeline operator is this one:
let (|&amp;gt;) x f = f x  So, take the thing on the left hand side of the operator and use it as the last parameter on the function in the right hand side.
On the other hand, we have this definition for the forward composition operator (&amp;gt;&amp;gt;)</description>
    </item>
    
    <item>
      <title>Sending forms with Suave, Suave.DotLiquid and Suave.Forms</title>
      <link>http://example.org/post/2016-04-21-forms-with-suave-dotliquid-and-suave-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/2016-04-21-forms-with-suave-dotliquid-and-suave-forms/</guid>
      <description>In the previous article we saw how to send forms using Suave.Experimental as view engine. In this article we&amp;rsquo;re going to use Suave.DotLiquid as view engine. We&amp;rsquo;ll see how we&amp;rsquo;re going to be able to reuse most of the work done previously.
Suave.DotLiquid DotLiquid is a port of the Ruby template engine Liquid. Suave is able to use this library thanks to the pakage Suave.DotLiquid. So, the first thing we need to do is install these packages in our project.</description>
    </item>
    
    <item>
      <title>Sending forms with Suave, Suave.Experimental and Suave.Forms</title>
      <link>http://example.org/post/2016-04-20-forms-with-suave-experimental-and-suave-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/2016-04-20-forms-with-suave-experimental-and-suave-forms/</guid>
      <description>Sending data to a web server is a very common task when developing a website. From registering a new user to filling some personal details in a web commerce application, we usually have to deal with filling a form and send its data to the web server. In this series of articles, we are going to see how to send data using different view engines.
Suave.Experimental Experimental is a component available via NuGet that allows us to write the views using F# code.</description>
    </item>
    
    <item>
      <title>Sequences in F#</title>
      <link>http://example.org/post/2016-02-20-sequences-in-fsharp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/2016-02-20-sequences-in-fsharp/</guid>
      <description>A sequence is a list of potential values (all of them of the same type) computed on demand.
Sequence creation As with arrays there are several ways to create a sequence.
Create from a range expression
You can create a new sequence from a range expression. In this case, instead of using [| and |] you should use { and }
let numbers = {1..20}  Create from a sequence expression</description>
    </item>
    
  </channel>
</rss>